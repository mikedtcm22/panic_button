name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run type checking
        run: npm run type-check

  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: file:./test.db
      NEXT_PUBLIC_MOCK_MODE: true
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_Y2xlcmsuY2xlcmsuZGV2JA
      CLERK_SECRET_KEY: sk_test_1234567890abcdefghijklmnop
      OPENAI_API_KEY: sk-mock-key
      CLOUDFLARE_R2_ACCESS_KEY_ID: mock-access-key
      CLOUDFLARE_R2_SECRET_ACCESS_KEY: mock-secret-key
      CLOUDFLARE_R2_BUCKET_NAME: mock-bucket
      CLOUDFLARE_R2_ACCOUNT_ID: mock-account-id
      CLOUDFLARE_R2_REGION: auto
      PINECONE_API_KEY: mock-pinecone-key
      PINECONE_INDEX_NAME: mock-index
      PINECONE_NAMESPACE: mock-namespace
      PADDLE_VENDOR_ID: mock-vendor-id
      PADDLE_API_KEY: mock-api-key
      PADDLE_PUBLIC_KEY: mock-public-key
      NEXT_PUBLIC_APP_URL: http://localhost:3000

    strategy:
      matrix:
        shard: [1, 2, 3]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push

      - name: Run tests (shard ${{ matrix.shard }}/${{ strategy.job-total }})
        run: npm run test:ci -- --shard=${{ matrix.shard }}/${{ strategy.job-total }}

      - name: Upload coverage reports
        if: matrix.shard == 1
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_MOCK_MODE: true
      DATABASE_URL: file:./build.db
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_Y2xlcmsuY2xlcmsuZGV2JA
      CLERK_SECRET_KEY: sk_test_1234567890abcdefghijklmnop
      NEXT_PUBLIC_APP_URL: http://localhost:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Check bundle size
        run: |
          echo "Build Output:"
          du -sh .next/
          echo "Static files:"
          du -sh .next/static/
          echo "Server files:"
          du -sh .next/server/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'panic-button'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
        continue-on-error: true

      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-check-report
          path: reports/

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_MOCK_MODE: true
      DATABASE_URL: file:./lighthouse.db
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_Y2xlcmsuY2xlcmsuZGV2JA
      CLERK_SECRET_KEY: sk_test_1234567890abcdefghijklmnop
      NEXT_PUBLIC_APP_URL: http://localhost:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.13.x
          npm run start &
          sleep 10
          lhci autorun --upload.target=temporary-public-storage || true

  all-checks-passed:
    name: All Checks Passed
    needs: [lint, type-check, test, build, security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Verify all checks passed
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.type-check.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" || 
                "${{ needs.security.result }}" != "success" ]]; then
            echo "One or more required checks failed"
            exit 1
          fi
          echo "All required checks passed successfully!"
